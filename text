///////////////////////////////////////////////////////////////////////////////////////////
1. Что такое fetch и зачем он нужен?
  Fetch API позволяет JS обмениваться данными с сервером с помощью HTTP-запросов
    и является более совершенной заменой классу XMLHttpRequest.
    Выполнение запросов осуществляется методом fetch() и возвращает Promise


///////////////////////////////////////////////////////////////////////////////////////////

2. Что такое Promise и зачем они нужны?

    Promise - это какие либо данные, которые возращаются ассинхронной фукнцией.

    Она может находиться в трех состояниях: Ожидание, Выполнено, Ошибка
        Ожидание – ждет выполнения операции.
        Выполнено - возвращает результат выполнения операции (это resolve из примера ниже)
        Ошибка – выводит причину ошибки выполнения операции (это reject из прииера ниже)

    //  ПРОСТОЙ ПРИМЕР PROMISE


    var promise = new Promise(function(resolve, reject) {
    // Делаем, что-то, возможно асинхронное, тогда…

    if (/* Всё прошло отлично */) {
        resolve('Сработало!');
    }
    else {
        reject(Error('Сломалось'));
    }
});

///////////////////////////////////////////////////////////////////////////////////////////
2. Конструкция async\await

   Такая конструкция позволяет нам писать код, который выглядит как синхронный,
    но используется для асинхронных задач

    Пример:
        const searchCoctail = async () => {
        const coctailDb = await fetch(`https://www.thecocktaildb.com/api/json/v1/1/search.php?s=${inputField.value}`)
        const data = await coctailDb.json();
        console.log(data)
}

///////////////////////////////////////////////////////////////////////////////////////////
3. Контекст JS

   Это окружение в котором пишется наш код JS или же другими словами
        -Область видимости. У каждой функции есть своя область видимости
         внутри которой, есть написанный код
         дейтсвуетвующий только на ту функцию в которой он находится.

   Контекст классов this
        Обращение к кому-то элементу в зависимости от окружения,
        может быть глобальным, находится внутри функции.
        Может либо ссылаться на определенный объект, либо иметь любое значение.

///////////////////////////////////////////////////////////////////////////////////////////
5. Зачем нужны стрелочные функции, разница между функциями в js

    Стрелочные функции не имеют собственного контекста
    и являются анонимными, отличаются от обычных функций
    более кратким синтаксисом и привязаны к значению this.
        Пример обычной функции:
            function get (number) {
                console.log(number)
            }
            get(123)
        Пример стрелочной функции:
            const number = (number) => {
                console.log(number)
            }
            number(123)

///////////////////////////////////////////////////////////////////////////////////////////
